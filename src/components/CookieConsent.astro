---
import { ui } from "../data/ui.ts";

interface Props {
  lang: keyof typeof ui;
}
const { lang = "ja" } = Astro.props;
const t = ui[lang];
---

<div
  id="cookie-consent-banner"
  class="hidden fixed bottom-0 left-0 right-0 bg-gray-100 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4 z-50"
>
  <div
    class="container mx-auto flex flex-col sm:flex-row items-center justify-between gap-4"
  >
    <p class="text-sm text-gray-700 dark:text-gray-300">
      {t["cookies.text"]}
      <a
        href={`/${lang}/legal/privacy-policy`}
        class="text-sky-600 dark:text-sky-400 hover:underline"
      >
        {t["legal.privacy-policy"]}
      </a>.
    </p>
    <div class="flex-shrink-0 flex gap-x-4">
      <button
        id="cookie-settings-button"
        class="font-medium text-sm text-gray-600 dark:text-gray-300 hover:underline"
      >
        {t["cookies.button.settings"]}
      </button>
      <button
        id="cookie-accept-all-button"
        class="bg-sky-600 hover:bg-sky-700 text-white font-bold py-2 px-5 rounded-lg text-sm transition-colors"
      >
        {t["cookies.button.accept"]}
      </button>
    </div>
  </div>
</div>

<div
  id="cookie-settings-modal"
  class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4"
>
  <div
    class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6"
  >
    <h2 class="text-2xl font-bold mb-4">{t["cookies.modal.title"]}</h2>
    <p class="text-gray-600 dark:text-gray-300 mb-6">
      {t["cookies.modal.body"]}
    </p>

    <div class="space-y-4">
      <div>
        <label class="flex items-center justify-between cursor-not-allowed">
          <span class="font-bold text-gray-800 dark:text-gray-100"
            >{t["cookies.modal.necessary.title"]}</span
          >
          <input
            type="checkbox"
            class="h-4 w-4 rounded text-sky-600 cursor-not-allowed"
            checked
            disabled
          />
        </label>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
          {t["cookies.modal.necessary.body"]}
        </p>
      </div>

      <div>
        <label class="flex items-center justify-between cursor-pointer">
          <span class="font-bold text-gray-800 dark:text-gray-100"
            >{t["cookies.modal.analytics.title"]}</span
          >
          <input
            type="checkbox"
            id="analytics-toggle"
            class="h-4 w-4 rounded text-sky-600 focus:ring-sky-500"
          />
        </label>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
          {t["cookies.modal.analytics.body"]}
        </p>
      </div>
    </div>

    <button
      id="cookie-save-button"
      class="mt-8 w-full bg-sky-600 hover:bg-sky-700 text-white font-bold py-2 px-5 rounded-lg text-sm transition-colors"
    >
      {t["cookies.modal.button.save"]}
    </button>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const consentKey = "cookie_consent_settings";

    const banner = document.getElementById("cookie-consent-banner");
    const settingsModal = document.getElementById("cookie-settings-modal");

    const acceptAllButton = document.getElementById("cookie-accept-all-button");
    const settingsButton = document.getElementById("cookie-settings-button");
    const saveButton = document.getElementById("cookie-save-button");
    const analyticsToggle = document.getElementById(
      "analytics-toggle"
    ) as HTMLInputElement | null;

    if (
      !banner ||
      !settingsModal ||
      !acceptAllButton ||
      !settingsButton ||
      !saveButton ||
      !analyticsToggle
    )
      return;

    function applyConsent(settings: { analytics: boolean }) {
      if (settings.analytics) {
        if (typeof window.initializeGA === "function") {
          window.initializeGA();
        }
      }
    }

    function hideAll() {
      if (banner) {
        banner.classList.add("hidden");
      }
      if (settingsModal) {
        settingsModal.classList.add("hidden");
      }
    }

    function handleSave() {
      const settings = {
        analytics: analyticsToggle ? analyticsToggle.checked : false,
      };
      localStorage.setItem(consentKey, JSON.stringify(settings));
      hideAll();
      applyConsent(settings);
    }

    const savedSettingsRaw = localStorage.getItem(consentKey);
    if (savedSettingsRaw) {
      const settings = JSON.parse(savedSettingsRaw);
      applyConsent(settings);
    } else {
      banner.classList.remove("hidden");
    }

    acceptAllButton.addEventListener("click", () => {
      const settings = { analytics: true };
      localStorage.setItem(consentKey, JSON.stringify(settings));
      hideAll();
      applyConsent(settings);
    });

    settingsButton.addEventListener("click", () => {
      banner.classList.add("hidden");
      settingsModal.classList.remove("hidden");
    });

    saveButton.addEventListener("click", handleSave);
  });
</script>
